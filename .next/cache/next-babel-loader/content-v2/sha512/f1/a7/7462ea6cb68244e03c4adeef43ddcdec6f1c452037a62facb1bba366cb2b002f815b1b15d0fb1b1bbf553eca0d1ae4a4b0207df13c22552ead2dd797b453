{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/test/work/allProjects/components/Weather/UI/geolocation/UserGeolocation.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { definitionOfGeodata } from \"../../../../redux/Weather/actions/definitionOfGeodata\";\n\nfunction UserGeolocation(props) {\n  _s();\n\n  var onDefinitionOfGeodata = props.onDefinitionOfGeodata; // const [lat, setLat] = useState(localStorage.getItem(\"latitude\") || null);\n  // const [lon, setLon] = useState(localStorage.getItem(\"longitude\") || null);\n\n  var _useState = useState(null),\n      lat = _useState[0],\n      setLat = _useState[1];\n\n  var _useState2 = useState(null),\n      lon = _useState2[0],\n      setLon = _useState2[1];\n\n  useEffect(function () {\n    if (lat && lon) {\n      onDefinitionOfGeodata(lat, lon);\n    }\n  }, [lat, lon, onDefinitionOfGeodata]);\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      localStorage.setItem(\"latitude\", position.coords.latitude);\n      setLat(position.coords.latitude);\n      localStorage.setItem(\"longitude\", position.coords.longitude);\n      setLon(position.coords.longitude);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UserGeolocation, \"BYiLpy+fDyjNILVqqntneJluF4Y=\");\n\n_c = UserGeolocation;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDefinitionOfGeodata: function onDefinitionOfGeodata(latitude, longitude) {\n      return dispatch(definitionOfGeodata(latitude, longitude));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(UserGeolocation);\n\nvar _c;\n\n$RefreshReg$(_c, \"UserGeolocation\");","map":{"version":3,"sources":["/home/test/work/allProjects/components/Weather/UI/geolocation/UserGeolocation.jsx"],"names":["React","useEffect","useState","connect","definitionOfGeodata","UserGeolocation","props","onDefinitionOfGeodata","lat","setLat","lon","setLon","navigator","geolocation","getCurrentPosition","position","localStorage","setItem","coords","latitude","longitude","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,uDAApC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAAA,MACtBC,qBADsB,GACID,KADJ,CACtBC,qBADsB,EAE9B;AACA;;AAH8B,kBAIRL,QAAQ,CAAC,IAAD,CAJA;AAAA,MAIvBM,GAJuB;AAAA,MAIlBC,MAJkB;;AAAA,mBAKRP,QAAQ,CAAC,IAAD,CALA;AAAA,MAKvBQ,GALuB;AAAA,MAKlBC,MALkB;;AAO9BV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,GAAG,IAAIE,GAAX,EAAgB;AACdH,MAAAA,qBAAqB,CAACC,GAAD,EAAME,GAAN,CAArB;AACD;AACF,GAJQ,EAIN,CAACF,GAAD,EAAME,GAAN,EAAWH,qBAAX,CAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAUC,QAAV,EAAoB;AAC3DC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,QAAQ,CAACG,MAAT,CAAgBC,QAAjD;AACAV,MAAAA,MAAM,CAACM,QAAQ,CAACG,MAAT,CAAgBC,QAAjB,CAAN;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,QAAQ,CAACG,MAAT,CAAgBE,SAAlD;AACAT,MAAAA,MAAM,CAACI,QAAQ,CAACG,MAAT,CAAgBE,SAAjB,CAAN;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AASA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AAID;;GA1BQf,e;;KAAAA,e;;AA4BT,IAAMgB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLf,IAAAA,qBAAqB,EAAE,+BAACY,QAAD,EAAWC,SAAX;AAAA,aACrBE,QAAQ,CAAClB,mBAAmB,CAACe,QAAD,EAAWC,SAAX,CAApB,CADa;AAAA;AADlB,GAAP;AAID,CALD;;AAOA,eAAejB,OAAO,CAAC,IAAD,EAAOkB,kBAAP,CAAP,CAAkChB,eAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { definitionOfGeodata } from \"../../../../redux/Weather/actions/definitionOfGeodata\";\n\nfunction UserGeolocation(props) {\n  const { onDefinitionOfGeodata } = props;\n  // const [lat, setLat] = useState(localStorage.getItem(\"latitude\") || null);\n  // const [lon, setLon] = useState(localStorage.getItem(\"longitude\") || null);\n  const [lat, setLat] = useState(null);\n  const [lon, setLon] = useState(null);\n\n  useEffect(() => {\n    if (lat && lon) {\n      onDefinitionOfGeodata(lat, lon);\n    }\n  }, [lat, lon, onDefinitionOfGeodata]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      localStorage.setItem(\"latitude\", position.coords.latitude)\n      setLat(position.coords.latitude);\n      localStorage.setItem(\"longitude\", position.coords.longitude)\n      setLon(position.coords.longitude);\n    });\n  }, []);\n\n  return <div>\n    {/* <p>{lat}</p>\n    <p>{lon}</p> */}\n  </div>;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDefinitionOfGeodata: (latitude, longitude) =>\n      dispatch(definitionOfGeodata(latitude, longitude)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(UserGeolocation);\n"]},"metadata":{},"sourceType":"module"}