{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/test/work/allProjects/components/Rick and Morty/CharactersTable.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { useEffect } from \"react\";\nimport { loadCharacters } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\nimport { connect } from \"react-redux\";\nimport { showModal as _showModal, hideModal as _hideModal } from \"../../redux/Rick and Morty/actions/modal\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport classes from \"../../styles/rick and morty/Table.module.css\";\nvar columns = [{\n  field: \"id\",\n  headerName: \"â„–\",\n  width: 70,\n  align: \"center\"\n}, {\n  field: \"name\",\n  headerName: \"Name\",\n  width: 150,\n  align: \"center\"\n}, {\n  field: \"status\",\n  headerName: \"Status\",\n  width: 130,\n  align: \"center\"\n}, {\n  field: \"species\",\n  headerName: \"Species\",\n  width: 120,\n  align: \"center\"\n}, {\n  field: \"gender\",\n  headerName: \"Gender\",\n  width: 120,\n  align: \"center\"\n}];\n\nfunction CharactersTable(_ref) {\n  _s();\n\n  var onloadCharacters = _ref.onloadCharacters,\n      characters = _ref.characters,\n      modal = _ref.modal,\n      showModal = _ref.showModal,\n      hideModal = _ref.hideModal,\n      modalImage = _ref.modalImage,\n      modalName = _ref.modalName,\n      modalStatus = _ref.modalStatus,\n      modalSpecies = _ref.modalSpecies,\n      modalGender = _ref.modalGender,\n      loader = _ref.loader;\n  useEffect(function () {\n    onloadCharacters();\n  }, [onloadCharacters]);\n  characters.map(function (character) {\n    return {\n      id: character.id,\n      name: character.name,\n      status: character.status,\n      species: character.species,\n      gender: character.gender\n    };\n  });\n\n  var onShowModal = function onShowModal(character) {\n    showModal(character);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: [loader ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        className: classes.loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(DataGrid, {\n        className: classes.DataGrid,\n        rows: characters,\n        columns: columns,\n        pageSize: 10,\n        disableColumnMenu: true,\n        disableColumnSelector: true,\n        hideFooter: true,\n        autoHeight: true,\n        autoPageSize: true,\n        onRowClick: onShowModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        className: classes.modal,\n        open: modal,\n        onClose: hideModal,\n        closeAfterTransition: true,\n        BackdropComponent: Backdrop,\n        BackdropProps: {\n          timeout: 1500\n        },\n        children: /*#__PURE__*/_jsxDEV(Fade, {\n          \"in\": modal,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.fade,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: classes.picture,\n              src: modalImage,\n              alt: \"logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.textInModal,\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Name: \", modalName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Status: \", modalStatus]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Species: \", modalSpecies]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Gender: \", modalGender]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CharactersTable, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CharactersTable;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    characters: state.putCharacters.characters,\n    modal: state.modal.modal,\n    modalImage: state.modal.image,\n    modalName: state.modal.name,\n    modalStatus: state.modal.status,\n    modalSpecies: state.modal.species,\n    modalGender: state.modal.gender,\n    loader: state.loader.loader\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onloadCharacters: function onloadCharacters(page) {\n      return dispatch(loadCharacters(page));\n    },\n    showModal: function showModal(character) {\n      return dispatch(_showModal(character));\n    },\n    hideModal: function hideModal() {\n      return dispatch(_hideModal());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersTable); // import * as React from \"react\";\n// import Modal from \"@material-ui/core/Modal\";\n// import Backdrop from \"@material-ui/core/Backdrop\";\n// import Fade from \"@material-ui/core/Fade\";\n// import { DataGrid } from \"@material-ui/data-grid\";\n// import { useEffect } from \"react\";\n// import {\n//   loadCharacters,\n//   rememberPage,\n// } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\n// import { connect } from \"react-redux\";\n// import { showModal, hideModal } from \"../../redux/Rick and Morty/actions/modal\";\n// import Pagination from \"@material-ui/lab/Pagination\";\n// import { CircularProgress } from \"@material-ui/core\";\n// import classes from \"../../styles/rick and morty/Table.module.css\";\n// const columns = [\n//   { field: \"id\", headerName: \"â„–\", width: 70, align: \"center\" },\n//   { field: \"name\", headerName: \"Name\", width: 150, align: \"center\" },\n//   { field: \"status\", headerName: \"Status\", width: 130, align: \"center\" },\n//   { field: \"species\", headerName: \"Species\", width: 120, align: \"center\" },\n//   { field: \"gender\", headerName: \"Gender\", width: 120, align: \"center\" },\n// ];\n// function CharactersTable({\n//   onloadCharacters,\n//   characters,\n//   modal,\n//   showModal,\n//   hideModal,\n//   pages,\n//   modalImage,\n//   modalName,\n//   modalStatus,\n//   modalSpecies,\n//   modalGender,\n//   page,\n//   status,\n//   species,\n//   gender,\n//   loader,\n//   rememberPage,\n// }) {\n//   useEffect(() => {\n//     onloadCharacters();\n//   }, [onloadCharacters]);\n//   characters.map((character) => {\n//     return {\n//       id: character.id,\n//       name: character.name,\n//       status: character.status,\n//       species: character.species,\n//       gender: character.gender,\n//     };\n//   });\n//   const onShowModal = (character) => {\n//     showModal(character);\n//   };\n//   // const pageChange = (page) => {\n//   //   rememberPage(page);\n//   //   onloadCharacters(page, status, species, gender);\n//   // };\n//   return (\n//     <div>\n//       <div className={classes.container}>\n//         {/* <div>\n//         <CircularProgress classes=\"loader\"/>\n//         </div>\n//         <div className=\"loader\">\n//         <CircularProgress size={300} className=\"loader\"/>\n//         </div> */}\n//         {loader ? (\n//           <CircularProgress className={classes.loader} />\n//         ) : (\n//           <DataGrid\n//             className={classes.DataGrid}\n//             rows={characters}\n//             columns={columns}\n//             pageSize={10}\n//             disableColumnMenu\n//             disableColumnSelector\n//             hideFooter\n//             autoHeight\n//             autoPageSize\n//             onRowClick={onShowModal}\n//           />\n//         )}\n//         <Modal\n//           className={classes.modal}\n//           open={modal}\n//           onClose={hideModal}\n//           closeAfterTransition\n//           BackdropComponent={Backdrop}\n//           BackdropProps={{\n//             timeout: 1500,\n//           }}\n//         >\n//           <Fade in={modal}>\n//             <div className={classes.fade}>\n//               <img className={classes.picture} src={modalImage} alt=\"logo\" />\n//               <div className={classes.textInModal}>\n//                 <h2>Name: {modalName}</h2>\n//                 <p>Status: {modalStatus}</p>\n//                 <p>Species: {modalSpecies}</p>\n//                 <p>Gender: {modalGender}</p>\n//               </div>\n//             </div>\n//           </Fade>\n//         </Modal>\n//       </div>\n//       {/* <div className={classes.pagination}>\n//         <Pagination\n//           count={pages}\n//           page={page}\n//           boundaryCount={2}\n//           color=\"primary\"\n//           onChange={(event, page) => pageChange(page)}\n//           showFirstButton\n//           showLastButton\n//           size=\"large\"\n//         />\n//       </div> */}\n//     </div>\n//   );\n// }\n// const mapStateToProps = (state) => {\n//   return {\n//     // page: state.putCharacters.page,\n//     // pages: state.putCharacters.pages,\n//     characters: state.putCharacters.characters,\n//     modal: state.modal.modal,\n//     modalImage: state.modal.image,\n//     modalName: state.modal.name,\n//     modalStatus: state.modal.status,\n//     modalSpecies: state.modal.species,\n//     modalGender: state.modal.gender,\n//     // status: state.filterCharacters.status,\n//     // species: state.filterCharacters.species,\n//     // gender: state.filterCharacters.gender,\n//     loader: state.loader.loader,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onloadCharacters: (page) => dispatch(loadCharacters(page)),\n//     // rememberPage: (page) => dispatch(rememberPage(page)),\n//     showModal: (character) => dispatch(showModal(character)),\n//     hideModal: () => dispatch(hideModal()),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(CharactersTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"CharactersTable\");","map":{"version":3,"sources":["/home/test/work/allProjects/components/Rick and Morty/CharactersTable.jsx"],"names":["React","Modal","Backdrop","Fade","DataGrid","useEffect","loadCharacters","connect","showModal","hideModal","CircularProgress","classes","columns","field","headerName","width","align","CharactersTable","onloadCharacters","characters","modal","modalImage","modalName","modalStatus","modalSpecies","modalGender","loader","map","character","id","name","status","species","gender","onShowModal","container","timeout","fade","picture","textInModal","mapStateToProps","state","putCharacters","image","mapDispatchToProps","dispatch","page"],"mappings":"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":["import * as React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { useEffect } from \"react\";\nimport { loadCharacters } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\nimport { connect } from \"react-redux\";\nimport { showModal, hideModal } from \"../../redux/Rick and Morty/actions/modal\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport classes from \"../../styles/rick and morty/Table.module.css\";\n\nconst columns = [\n  { field: \"id\", headerName: \"â„–\", width: 70, align: \"center\" },\n  { field: \"name\", headerName: \"Name\", width: 150, align: \"center\" },\n  { field: \"status\", headerName: \"Status\", width: 130, align: \"center\" },\n  { field: \"species\", headerName: \"Species\", width: 120, align: \"center\" },\n  { field: \"gender\", headerName: \"Gender\", width: 120, align: \"center\" },\n];\n\nfunction CharactersTable({\n  onloadCharacters,\n  characters,\n  modal,\n  showModal,\n  hideModal,\n  modalImage,\n  modalName,\n  modalStatus,\n  modalSpecies,\n  modalGender,\n  loader,\n}) {\n  useEffect(() => {\n    onloadCharacters();\n  }, [onloadCharacters]);\n\n  characters.map((character) => {\n    return {\n      id: character.id,\n      name: character.name,\n      status: character.status,\n      species: character.species,\n      gender: character.gender,\n    };\n  });\n\n  const onShowModal = (character) => {\n    showModal(character);\n  };\n\n  return (\n    <div>\n      <div className={classes.container}>\n        {/* <div>\n        <CircularProgress classes=\"loader\"/> \n        </div>\n        <div className=\"loader\">\n        <CircularProgress size={300} className=\"loader\"/> \n        </div> */}\n        {loader ? (\n          <CircularProgress className={classes.loader} />\n        ) : (\n          <DataGrid\n            className={classes.DataGrid}\n            rows={characters}\n            columns={columns}\n            pageSize={10}\n            disableColumnMenu\n            disableColumnSelector\n            hideFooter\n            autoHeight\n            autoPageSize\n            onRowClick={onShowModal}\n          />\n        )}\n        <Modal\n          className={classes.modal}\n          open={modal}\n          onClose={hideModal}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 1500,\n          }}\n        >\n          <Fade in={modal}>\n            <div className={classes.fade}>\n              <img className={classes.picture} src={modalImage} alt=\"logo\" />\n              <div className={classes.textInModal}>\n                <h2>Name: {modalName}</h2>\n                <p>Status: {modalStatus}</p>\n                <p>Species: {modalSpecies}</p>\n                <p>Gender: {modalGender}</p>\n              </div>\n            </div>\n          </Fade>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    characters: state.putCharacters.characters,\n    modal: state.modal.modal,\n    modalImage: state.modal.image,\n    modalName: state.modal.name,\n    modalStatus: state.modal.status,\n    modalSpecies: state.modal.species,\n    modalGender: state.modal.gender,\n    loader: state.loader.loader,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onloadCharacters: (page) => dispatch(loadCharacters(page)),\n    showModal: (character) => dispatch(showModal(character)),\n    hideModal: () => dispatch(hideModal()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersTable);\n\n// import * as React from \"react\";\n// import Modal from \"@material-ui/core/Modal\";\n// import Backdrop from \"@material-ui/core/Backdrop\";\n// import Fade from \"@material-ui/core/Fade\";\n// import { DataGrid } from \"@material-ui/data-grid\";\n// import { useEffect } from \"react\";\n// import {\n//   loadCharacters,\n//   rememberPage,\n// } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\n// import { connect } from \"react-redux\";\n// import { showModal, hideModal } from \"../../redux/Rick and Morty/actions/modal\";\n// import Pagination from \"@material-ui/lab/Pagination\";\n// import { CircularProgress } from \"@material-ui/core\";\n// import classes from \"../../styles/rick and morty/Table.module.css\";\n\n// const columns = [\n//   { field: \"id\", headerName: \"â„–\", width: 70, align: \"center\" },\n//   { field: \"name\", headerName: \"Name\", width: 150, align: \"center\" },\n//   { field: \"status\", headerName: \"Status\", width: 130, align: \"center\" },\n//   { field: \"species\", headerName: \"Species\", width: 120, align: \"center\" },\n//   { field: \"gender\", headerName: \"Gender\", width: 120, align: \"center\" },\n// ];\n\n// function CharactersTable({\n//   onloadCharacters,\n//   characters,\n//   modal,\n//   showModal,\n//   hideModal,\n//   pages,\n//   modalImage,\n//   modalName,\n//   modalStatus,\n//   modalSpecies,\n//   modalGender,\n//   page,\n//   status,\n//   species,\n//   gender,\n//   loader,\n//   rememberPage,\n// }) {\n//   useEffect(() => {\n//     onloadCharacters();\n//   }, [onloadCharacters]);\n\n//   characters.map((character) => {\n//     return {\n//       id: character.id,\n//       name: character.name,\n//       status: character.status,\n//       species: character.species,\n//       gender: character.gender,\n//     };\n//   });\n\n//   const onShowModal = (character) => {\n//     showModal(character);\n//   };\n\n//   // const pageChange = (page) => {\n//   //   rememberPage(page);\n//   //   onloadCharacters(page, status, species, gender);\n//   // };\n\n//   return (\n//     <div>\n//       <div className={classes.container}>\n//         {/* <div>\n//         <CircularProgress classes=\"loader\"/>\n//         </div>\n//         <div className=\"loader\">\n//         <CircularProgress size={300} className=\"loader\"/>\n//         </div> */}\n//         {loader ? (\n//           <CircularProgress className={classes.loader} />\n//         ) : (\n//           <DataGrid\n//             className={classes.DataGrid}\n//             rows={characters}\n//             columns={columns}\n//             pageSize={10}\n//             disableColumnMenu\n//             disableColumnSelector\n//             hideFooter\n//             autoHeight\n//             autoPageSize\n//             onRowClick={onShowModal}\n//           />\n//         )}\n//         <Modal\n//           className={classes.modal}\n//           open={modal}\n//           onClose={hideModal}\n//           closeAfterTransition\n//           BackdropComponent={Backdrop}\n//           BackdropProps={{\n//             timeout: 1500,\n//           }}\n//         >\n//           <Fade in={modal}>\n//             <div className={classes.fade}>\n//               <img className={classes.picture} src={modalImage} alt=\"logo\" />\n//               <div className={classes.textInModal}>\n//                 <h2>Name: {modalName}</h2>\n//                 <p>Status: {modalStatus}</p>\n//                 <p>Species: {modalSpecies}</p>\n//                 <p>Gender: {modalGender}</p>\n//               </div>\n//             </div>\n//           </Fade>\n//         </Modal>\n//       </div>\n//       {/* <div className={classes.pagination}>\n//         <Pagination\n//           count={pages}\n//           page={page}\n//           boundaryCount={2}\n//           color=\"primary\"\n//           onChange={(event, page) => pageChange(page)}\n//           showFirstButton\n//           showLastButton\n//           size=\"large\"\n//         />\n//       </div> */}\n//     </div>\n//   );\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     // page: state.putCharacters.page,\n//     // pages: state.putCharacters.pages,\n//     characters: state.putCharacters.characters,\n//     modal: state.modal.modal,\n//     modalImage: state.modal.image,\n//     modalName: state.modal.name,\n//     modalStatus: state.modal.status,\n//     modalSpecies: state.modal.species,\n//     modalGender: state.modal.gender,\n//     // status: state.filterCharacters.status,\n//     // species: state.filterCharacters.species,\n//     // gender: state.filterCharacters.gender,\n//     loader: state.loader.loader,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onloadCharacters: (page) => dispatch(loadCharacters(page)),\n//     // rememberPage: (page) => dispatch(rememberPage(page)),\n//     showModal: (character) => dispatch(showModal(character)),\n//     hideModal: () => dispatch(hideModal()),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(CharactersTable);\n"]},"metadata":{},"sourceType":"module"}