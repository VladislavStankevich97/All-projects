{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/test/work/allProjects/components/Weather/UI/geolocation/UserGeolocation.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { definitionOfGeodata } from \"../../../redux/actions/definitionOfGeodata\";\n\nfunction UserGeolocation(props) {\n  const {\n    onDefinitionOfGeodata\n  } = props;\n  const {\n    0: lat,\n    1: setLat\n  } = useState(localStorage.getItem(\"latitude\") || null);\n  const {\n    0: lon,\n    1: setLon\n  } = useState(localStorage.getItem(\"longitude\") || null);\n  useEffect(() => {\n    if (lat && lon) {\n      onDefinitionOfGeodata(lat, lon);\n    }\n  }, [lat, lon, onDefinitionOfGeodata]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      localStorage.setItem(\"latitude\", position.coords.latitude);\n      setLat(position.coords.latitude);\n      localStorage.setItem(\"longitude\", position.coords.longitude);\n      setLon(position.coords.longitude);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDefinitionOfGeodata: (latitude, longitude) => dispatch(definitionOfGeodata(latitude, longitude))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(UserGeolocation);","map":{"version":3,"sources":["/home/test/work/allProjects/components/Weather/UI/geolocation/UserGeolocation.jsx"],"names":["React","useEffect","useState","connect","definitionOfGeodata","UserGeolocation","props","onDefinitionOfGeodata","lat","setLat","localStorage","getItem","lon","setLon","navigator","geolocation","getCurrentPosition","position","setItem","coords","latitude","longitude","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,4CAApC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAA4BD,KAAlC;AACA,QAAM;AAAA,OAACE,GAAD;AAAA,OAAMC;AAAN,MAAgBP,QAAQ,CAACQ,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,IAArC,CAA9B;AACA,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBX,QAAQ,CAACQ,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,IAAtC,CAA9B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,GAAG,IAAII,GAAX,EAAgB;AACdL,MAAAA,qBAAqB,CAACC,GAAD,EAAMI,GAAN,CAArB;AACD;AACF,GAJQ,EAIN,CAACJ,GAAD,EAAMI,GAAN,EAAWL,qBAAX,CAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAUC,QAAV,EAAoB;AAC3DP,MAAAA,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCD,QAAQ,CAACE,MAAT,CAAgBC,QAAjD;AACAX,MAAAA,MAAM,CAACQ,QAAQ,CAACE,MAAT,CAAgBC,QAAjB,CAAN;AACAV,MAAAA,YAAY,CAACQ,OAAb,CAAqB,WAArB,EAAkCD,QAAQ,CAACE,MAAT,CAAgBE,SAAlD;AACAR,MAAAA,MAAM,CAACI,QAAQ,CAACE,MAAT,CAAgBE,SAAjB,CAAN;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AASA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AAID;;AAED,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLhB,IAAAA,qBAAqB,EAAE,CAACa,QAAD,EAAWC,SAAX,KACrBE,QAAQ,CAACnB,mBAAmB,CAACgB,QAAD,EAAWC,SAAX,CAApB;AAFL,GAAP;AAID,CALD;;AAOA,eAAelB,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCjB,eAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { definitionOfGeodata } from \"../../../redux/actions/definitionOfGeodata\";\n\nfunction UserGeolocation(props) {\n  const { onDefinitionOfGeodata } = props;\n  const [lat, setLat] = useState(localStorage.getItem(\"latitude\") || null);\n  const [lon, setLon] = useState(localStorage.getItem(\"longitude\") || null);\n\n  useEffect(() => {\n    if (lat && lon) {\n      onDefinitionOfGeodata(lat, lon);\n    }\n  }, [lat, lon, onDefinitionOfGeodata]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      localStorage.setItem(\"latitude\", position.coords.latitude)\n      setLat(position.coords.latitude);\n      localStorage.setItem(\"longitude\", position.coords.longitude)\n      setLon(position.coords.longitude);\n    });\n  }, []);\n\n  return <div>\n    {/* <p>{lat}</p>\n    <p>{lon}</p> */}\n  </div>;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDefinitionOfGeodata: (latitude, longitude) =>\n      dispatch(definitionOfGeodata(latitude, longitude)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(UserGeolocation);\n"]},"metadata":{},"sourceType":"module"}