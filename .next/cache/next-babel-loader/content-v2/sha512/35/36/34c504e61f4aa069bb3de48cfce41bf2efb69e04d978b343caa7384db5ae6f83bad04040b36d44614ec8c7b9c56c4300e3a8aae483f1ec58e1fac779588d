{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PUT_CHARACTERS, REMEMBER_PAGE } from \"../actions/constants\";\nconst initialState = {\n  pages: null,\n  page: 1,\n  characters: []\n};\n\nconst putCharacters = (state = initialState, action) => {\n  switch (action.type) {\n    case PUT_CHARACTERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pages: action.payload.info.pages,\n        characters: action.payload.results\n      });\n\n    case REMEMBER_PAGE:\n      console.log(action.page);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        page: action.page\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default putCharacters;","map":{"version":3,"sources":["/home/test/work/allProjects/redux/Rick and Morty/reducers/putCharacters.js"],"names":["PUT_CHARACTERS","REMEMBER_PAGE","initialState","pages","page","characters","putCharacters","state","action","type","payload","info","results","console","log"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,aAAzB,QAA8C,sBAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,IAAI,EAAE,CAFa;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,cAAL;AACE,6CACKO,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBR,KAF7B;AAGEE,QAAAA,UAAU,EAAEG,MAAM,CAACE,OAAP,CAAeE;AAH7B;;AAKF,SAAKX,aAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACJ,IAAnB;AACA,6CACKG,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFf;;AAIF;AACE,aAAOG,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,aAAf","sourcesContent":["import { PUT_CHARACTERS, REMEMBER_PAGE } from \"../actions/constants\";\n\nconst initialState = {\n  pages: null,\n  page: 1,\n  characters: [],\n};\n\nconst putCharacters = (state = initialState, action) => {\n  switch (action.type) {\n    case PUT_CHARACTERS:\n      return {\n        ...state,\n        pages: action.payload.info.pages,\n        characters: action.payload.results\n      };\n    case REMEMBER_PAGE:\n      console.log(action.page)\n      return {\n        ...state,\n        page: action.page,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default putCharacters;\n"]},"metadata":{},"sourceType":"module"}