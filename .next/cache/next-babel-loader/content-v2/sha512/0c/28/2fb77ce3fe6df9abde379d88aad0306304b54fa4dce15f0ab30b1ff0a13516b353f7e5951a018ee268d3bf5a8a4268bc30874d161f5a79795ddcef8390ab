{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED } from '../actions/constants';\nconst initialState = {\n  filter: JSON.parse(localStorage.getItem('filter')) || SHOW_ALL,\n  show: 0\n};\nexport default function filterReducer(state = initialState, action) {\n  switch (action.type) {\n    case SHOW_ALL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filter: SHOW_ALL,\n        show: 0\n      });\n\n    case SHOW_ACTIVE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filter: SHOW_ACTIVE,\n        show: 1\n      });\n\n    case SHOW_COMPLETED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filter: SHOW_COMPLETED,\n        show: 2\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/test/work/allProjects/redux/ToDo-List/reducers/filterReducer.js"],"names":["SHOW_ALL","SHOW_ACTIVE","SHOW_COMPLETED","initialState","filter","JSON","parse","localStorage","getItem","show","filterReducer","state","action","type"],"mappings":";;;;;;AAAA,SACEA,QADF,EACYC,WADZ,EACyBC,cADzB,QAEO,sBAFP;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,KAA8CR,QADnC;AAEnBS,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,aAAT,CAAuBC,KAAK,GAAGR,YAA/B,EAA6CS,MAA7C,EAAqD;AAClE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,QAAL;AACE,6CACKW,KADL;AAEEP,QAAAA,MAAM,EAAEJ,QAFV;AAGES,QAAAA,IAAI,EAAE;AAHR;;AAKF,SAAKR,WAAL;AACE,6CACKU,KADL;AAEEP,QAAAA,MAAM,EAAEH,WAFV;AAGEQ,QAAAA,IAAI,EAAE;AAHR;;AAKF,SAAKP,cAAL;AACE,6CACKS,KADL;AAEEP,QAAAA,MAAM,EAAEF,cAFV;AAGEO,QAAAA,IAAI,EAAE;AAHR;;AAKF;AACE,aAAOE,KAAP;AApBJ;AAsBD","sourcesContent":["import {\n  SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED,\n} from '../actions/constants';\n\nconst initialState = {\n  filter: JSON.parse(localStorage.getItem('filter')) || SHOW_ALL,\n  show: 0,\n};\n\nexport default function filterReducer(state = initialState, action) {\n  switch (action.type) {\n    case SHOW_ALL:\n      return {\n        ...state,\n        filter: SHOW_ALL,\n        show: 0,\n      };\n    case SHOW_ACTIVE:\n      return {\n        ...state,\n        filter: SHOW_ACTIVE,\n        show: 1,\n      };\n    case SHOW_COMPLETED:\n      return {\n        ...state,\n        filter: SHOW_COMPLETED,\n        show: 2,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}