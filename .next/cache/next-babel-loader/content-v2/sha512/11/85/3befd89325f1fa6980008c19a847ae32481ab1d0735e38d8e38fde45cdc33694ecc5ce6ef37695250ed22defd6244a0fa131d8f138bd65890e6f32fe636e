{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TOGGLE_TODO, DELETE_TODO, ADD_TODO, INPUT } from \"../actions/constants\";\nconst initialState = {\n  textInpit: \"\",\n  message: \"\",\n  data: [],\n  completed: false\n};\nexport default function headerReducer(state = initialState, action) {\n  switch (action.type) {\n    case INPUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message: action.message\n        });\n      }\n\n    case ADD_TODO:\n      {\n        const {\n          data\n        } = state;\n        data.push({\n          message: state.message,\n          id: action.id,\n          completed: action.completed\n        });\n        const res = {\n          data: [...data]\n        };\n        return {\n          message: \"\",\n          res\n        };\n      }\n\n    case DELETE_TODO:\n      const todos = state.data.filter(todo => todo.id !== action.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: todos\n      });\n\n    case TOGGLE_TODO:\n      {\n        const res = state.data.map(todo => {\n          if (todo.id === action.id) {\n            return _objectSpread(_objectSpread({}, todo), {}, {\n              completed: !todo.completed\n            });\n          }\n\n          return todo;\n        });\n        return {\n          data: [...res]\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/test/work/allProjects/redux/ToDo-List/reducers/headerReducer.js"],"names":["TOGGLE_TODO","DELETE_TODO","ADD_TODO","INPUT","initialState","textInpit","message","data","completed","headerReducer","state","action","type","push","id","res","todos","filter","todo","map"],"mappings":";;;;;;AAAA,SACEA,WADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,KAJF,QAKO,sBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB;AAOA,eAAe,SAASC,aAAT,CAAuBC,KAAK,GAAGN,YAA/B,EAA6CO,MAA7C,EAAqD;AAClE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,KAAL;AAAY;AACV,+CAAYO,KAAZ;AAAmBJ,UAAAA,OAAO,EAAEK,MAAM,CAACL;AAAnC;AACD;;AACD,SAAKJ,QAAL;AAAe;AACb,cAAM;AAAEK,UAAAA;AAAF,YAAWG,KAAjB;AACAH,QAAAA,IAAI,CAACM,IAAL,CAAU;AACRP,UAAAA,OAAO,EAAEI,KAAK,CAACJ,OADP;AAERQ,UAAAA,EAAE,EAAEH,MAAM,CAACG,EAFH;AAGRN,UAAAA,SAAS,EAAEG,MAAM,CAACH;AAHV,SAAV;AAKA,cAAMO,GAAG,GAAG;AAAER,UAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAAR,SAAZ;AACA,eAAO;AAACD,UAAAA,OAAO,EAAE,EAAV;AAAcS,UAAAA;AAAd,SAAP;AACD;;AACD,SAAKd,WAAL;AACE,YAAMe,KAAK,GAAGN,KAAK,CAACH,IAAN,CAAWU,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYH,MAAM,CAACG,EAA/C,CAAd;AACA,6CACKJ,KADL;AAEEH,QAAAA,IAAI,EAAES;AAFR;;AAIF,SAAKhB,WAAL;AAAkB;AAChB,cAAMe,GAAG,GAAGL,KAAK,CAACH,IAAN,CAAWY,GAAX,CAAgBD,IAAD,IAAU;AACnC,cAAIA,IAAI,CAACJ,EAAL,KAAYH,MAAM,CAACG,EAAvB,EAA2B;AACzB,mDAAYI,IAAZ;AAAkBV,cAAAA,SAAS,EAAE,CAACU,IAAI,CAACV;AAAnC;AACD;;AACD,iBAAOU,IAAP;AACD,SALW,CAAZ;AAMA,eAAO;AAAEX,UAAAA,IAAI,EAAE,CAAC,GAAGQ,GAAJ;AAAR,SAAP;AACD;;AACD;AACE,aAAOL,KAAP;AA9BJ;AAgCD","sourcesContent":["import {\n  TOGGLE_TODO,\n  DELETE_TODO,\n  ADD_TODO,\n  INPUT,\n} from \"../actions/constants\";\n\nconst initialState = {\n  textInpit: \"\",\n  message: \"\",\n  data: [],\n  completed: false,\n};\n\nexport default function headerReducer(state = initialState, action) {\n  switch (action.type) {\n    case INPUT: { \n      return { ...state, message: action.message };\n    }\n    case ADD_TODO: {\n      const { data } = state;\n      data.push({\n        message: state.message,\n        id: action.id,\n        completed: action.completed,\n      });\n      const res = { data: [...data] };\n      return {message: \"\", res};\n    }\n    case DELETE_TODO:\n      const todos = state.data.filter((todo) => todo.id !== action.id);\n      return {\n        ...state,\n        data: todos,\n      };\n    case TOGGLE_TODO: {\n      const res = state.data.map((todo) => {\n        if (todo.id === action.id) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      });\n      return { data: [...res] };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}