{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/test/work/allProjects/components/Rick and Morty/CharactersTable.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { useEffect } from \"react\";\nimport { loadCharacters } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\nimport { connect } from \"react-redux\";\nimport { showModal, hideModal } from \"../../redux/Rick and Morty/actions/modal\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport classes from \"../../styles/rick and morty/Table.module.css\";\nvar columns = [{\n  field: \"id\",\n  headerName: \"№\",\n  width: 70,\n  align: \"center\"\n}, {\n  field: \"name\",\n  headerName: \"Name\",\n  width: 150,\n  align: \"center\"\n}, {\n  field: \"status\",\n  headerName: \"Status\",\n  width: 130,\n  align: \"center\"\n}, {\n  field: \"species\",\n  headerName: \"Species\",\n  width: 120,\n  align: \"center\"\n}, {\n  field: \"gender\",\n  headerName: \"Gender\",\n  width: 120,\n  align: \"center\"\n}];\n\nfunction CharactersTable(_ref) {\n  _s();\n\n  var onloadCharacters = _ref.onloadCharacters,\n      characters = _ref.characters,\n      loader = _ref.loader;\n  useEffect(function () {\n    onloadCharacters();\n  }, [onloadCharacters]);\n  characters.map(function (character) {\n    return {\n      id: character.id,\n      name: character.name,\n      status: character.status,\n      species: character.species,\n      gender: character.gender\n    };\n  }); // const onShowModal = (character) => {\n  //   showModal(character);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: loader ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        className: classes.loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(DataGrid, {\n        className: classes.DataGrid,\n        rows: characters,\n        columns: columns,\n        pageSize: 10,\n        disableColumnMenu: true,\n        disableColumnSelector: true,\n        hideFooter: true,\n        autoHeight: true,\n        autoPageSize: true,\n        onRowClick: onShowModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CharactersTable, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CharactersTable;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    characters: state.putCharacters.characters,\n    // modal: state.modal.modal,\n    // modalImage: state.modal.image,\n    // modalName: state.modal.name,\n    // modalStatus: state.modal.status,\n    // modalSpecies: state.modal.species,\n    // modalGender: state.modal.gender,\n    loader: state.loader.loader\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onloadCharacters: function onloadCharacters() {\n      return dispatch(loadCharacters());\n    } // showModal: (character) => dispatch(showModal(character)),\n    // hideModal: () => dispatch(hideModal()),\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"CharactersTable\");","map":{"version":3,"sources":["/home/test/work/allProjects/components/Rick and Morty/CharactersTable.jsx"],"names":["React","Modal","Backdrop","Fade","DataGrid","useEffect","loadCharacters","connect","showModal","hideModal","CircularProgress","classes","columns","field","headerName","width","align","CharactersTable","onloadCharacters","characters","loader","map","character","id","name","status","species","gender","container","onShowModal","mapStateToProps","state","putCharacters","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { useEffect } from \"react\";\nimport { loadCharacters } from \"../../redux/Rick and Morty/actions/loadAndPutCharacters\";\nimport { connect } from \"react-redux\";\nimport { showModal, hideModal } from \"../../redux/Rick and Morty/actions/modal\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport classes from \"../../styles/rick and morty/Table.module.css\";\n\nconst columns = [\n  { field: \"id\", headerName: \"№\", width: 70, align: \"center\" },\n  { field: \"name\", headerName: \"Name\", width: 150, align: \"center\" },\n  { field: \"status\", headerName: \"Status\", width: 130, align: \"center\" },\n  { field: \"species\", headerName: \"Species\", width: 120, align: \"center\" },\n  { field: \"gender\", headerName: \"Gender\", width: 120, align: \"center\" },\n];\n\nfunction CharactersTable({\n  onloadCharacters,\n  characters,\n  // showModal,\n  // modal,\n  // hideModal,\n  // modalImage,\n  // modalName,\n  // modalStatus,\n  // modalSpecies,\n  // modalGender,\n  loader,\n}) {\n  useEffect(() => {\n    onloadCharacters();\n  }, [onloadCharacters]);\n\n  characters.map((character) => {\n    return {\n      id: character.id,\n      name: character.name,\n      status: character.status,\n      species: character.species,\n      gender: character.gender,\n    };\n  });\n\n  // const onShowModal = (character) => {\n  //   showModal(character);\n  // };\n\n  return (\n    <div>\n      <div className={classes.container}>\n        {/* <div>\n        <CircularProgress classes=\"loader\"/> \n        </div>\n        <div className=\"loader\">\n        <CircularProgress size={300} className=\"loader\"/> \n        </div> */}\n        {loader ? (\n          <CircularProgress className={classes.loader} />\n        ) : (\n          <DataGrid\n            className={classes.DataGrid}\n            rows={characters}\n            columns={columns}\n            pageSize={10}\n            disableColumnMenu\n            disableColumnSelector\n            hideFooter\n            autoHeight\n            autoPageSize\n            onRowClick={onShowModal}\n          />\n        )}\n        {/* <Modal\n          className={classes.modal}\n          open={modal}\n          onClose={hideModal}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 1500,\n          }}\n        >\n          <Fade in={modal}>\n            <div className={classes.fade}>\n              <img className={classes.picture} src={modalImage} alt=\"logo\" />\n              <div className={classes.textInModal}>\n                <h2>Name: {modalName}</h2>\n                <p>Status: {modalStatus}</p>\n                <p>Species: {modalSpecies}</p>\n                <p>Gender: {modalGender}</p>\n              </div>\n            </div>\n          </Fade>\n        </Modal> */}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    characters: state.putCharacters.characters,\n    // modal: state.modal.modal,\n    // modalImage: state.modal.image,\n    // modalName: state.modal.name,\n    // modalStatus: state.modal.status,\n    // modalSpecies: state.modal.species,\n    // modalGender: state.modal.gender,\n    loader: state.loader.loader,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onloadCharacters: () => dispatch(loadCharacters()),\n    // showModal: (character) => dispatch(showModal(character)),\n    // hideModal: () => dispatch(hideModal()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersTable);\n\n"]},"metadata":{},"sourceType":"module"}