{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/test/work/allProjects/components/Weather/ButtonShowWeather.jsx\";\nimport React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { loadWeatherServerWeatherbit } from \"../../redux/Weather/actions/serverWeatherbit_saga\";\nimport { loadWeatherServerOpenweathermap } from \"../../redux/Weather/actions/serverOpenweathermap_thunk\";\nimport { getCity, getCountry, getCheckboxServerWeatherbit, getCheckboxServerOpenweathermap } from \"../../redux/Weather/selectors/selectors\";\n\nfunction ShowWeather(props) {\n  var city = props.city,\n      country = props.country,\n      isCheckboxServerWeatherbit = props.isCheckboxServerWeatherbit,\n      isCheckboxServerOpenweathermap = props.isCheckboxServerOpenweathermap,\n      onLoadWeatherServerWeatherbit = props.onLoadWeatherServerWeatherbit,\n      onLoadWeatherServerOpenweathermap = props.onLoadWeatherServerOpenweathermap;\n  var inactiveСheckboxes = !isCheckboxServerOpenweathermap && !isCheckboxServerWeatherbit;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"userButton\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: inactiveСheckboxes ? \"secondary\" : \"primary\",\n      disabled: inactiveСheckboxes,\n      onClick: isCheckboxServerOpenweathermap ? onLoadWeatherServerOpenweathermap(city, country) : onLoadWeatherServerWeatherbit(city, country),\n      children: inactiveСheckboxes ? \"select server\" : \"show weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ShowWeather;\n\nfunction mapStateToProps(state) {\n  return {\n    city: getCity(state),\n    country: getCountry(state),\n    isCheckboxServerWeatherbit: getCheckboxServerWeatherbit(state),\n    isCheckboxServerOpenweathermap: getCheckboxServerOpenweathermap(state)\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onLoadWeatherServerOpenweathermap: function onLoadWeatherServerOpenweathermap(city, country) {\n      return function () {\n        return dispatch(loadWeatherServerOpenweathermap(city, country));\n      };\n    },\n    onLoadWeatherServerWeatherbit: function onLoadWeatherServerWeatherbit(city, country) {\n      return function () {\n        return dispatch(loadWeatherServerWeatherbit(city, country));\n      };\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowWeather);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowWeather\");","map":{"version":3,"sources":["/home/test/work/allProjects/components/Weather/ButtonShowWeather.jsx"],"names":["React","Button","connect","loadWeatherServerWeatherbit","loadWeatherServerOpenweathermap","getCity","getCountry","getCheckboxServerWeatherbit","getCheckboxServerOpenweathermap","ShowWeather","props","city","country","isCheckboxServerWeatherbit","isCheckboxServerOpenweathermap","onLoadWeatherServerWeatherbit","onLoadWeatherServerOpenweathermap","inactiveСheckboxes","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,2BAAT,QAA4C,mDAA5C;AACA,SAASC,+BAAT,QAAgD,wDAAhD;AACA,SACEC,OADF,EAEEC,UAFF,EAGEC,2BAHF,EAIEC,+BAJF,QAKO,yCALP;;AAOA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAExBC,IAFwB,GAQtBD,KARsB,CAExBC,IAFwB;AAAA,MAGxBC,OAHwB,GAQtBF,KARsB,CAGxBE,OAHwB;AAAA,MAIxBC,0BAJwB,GAQtBH,KARsB,CAIxBG,0BAJwB;AAAA,MAKxBC,8BALwB,GAQtBJ,KARsB,CAKxBI,8BALwB;AAAA,MAMxBC,6BANwB,GAQtBL,KARsB,CAMxBK,6BANwB;AAAA,MAOxBC,iCAPwB,GAQtBN,KARsB,CAOxBM,iCAPwB;AAU1B,MAAMC,kBAAkB,GACtB,CAACH,8BAAD,IAAmC,CAACD,0BADtC;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAEI,kBAAkB,GAAG,WAAH,GAAiB,SAF5C;AAGE,MAAA,QAAQ,EAAEA,kBAHZ;AAIE,MAAA,OAAO,EACLH,8BAA8B,GAC1BE,iCAAiC,CAACL,IAAD,EAAOC,OAAP,CADP,GAE1BG,6BAA6B,CAACJ,IAAD,EAAOC,OAAP,CAPrC;AAAA,gBAUGK,kBAAkB,GAAG,eAAH,GAAqB;AAV1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KA7BQR,W;;AA+BT,SAASS,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLR,IAAAA,IAAI,EAAEN,OAAO,CAACc,KAAD,CADR;AAELP,IAAAA,OAAO,EAAEN,UAAU,CAACa,KAAD,CAFd;AAGLN,IAAAA,0BAA0B,EAAEN,2BAA2B,CAACY,KAAD,CAHlD;AAILL,IAAAA,8BAA8B,EAAEN,+BAA+B,CAACW,KAAD;AAJ1D,GAAP;AAMD;;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLL,IAAAA,iCAAiC,EAAE,2CAACL,IAAD,EAAOC,OAAP;AAAA,aAAmB;AAAA,eACpDS,QAAQ,CAACjB,+BAA+B,CAACO,IAAD,EAAOC,OAAP,CAAhC,CAD4C;AAAA,OAAnB;AAAA,KAD9B;AAGLG,IAAAA,6BAA6B,EAAE,uCAACJ,IAAD,EAAOC,OAAP;AAAA,aAAmB;AAAA,eAChDS,QAAQ,CAAClB,2BAA2B,CAACQ,IAAD,EAAOC,OAAP,CAA5B,CADwC;AAAA,OAAnB;AAAA;AAH1B,GAAP;AAMD,CAPD;;AASA,eAAeV,OAAO,CAACgB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CX,WAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { loadWeatherServerWeatherbit } from \"../../redux/Weather/actions/serverWeatherbit_saga\";\nimport { loadWeatherServerOpenweathermap } from \"../../redux/Weather/actions/serverOpenweathermap_thunk\";\nimport {\n  getCity,\n  getCountry,\n  getCheckboxServerWeatherbit,\n  getCheckboxServerOpenweathermap,\n} from \"../../redux/Weather/selectors/selectors\";\n\nfunction ShowWeather(props) {\n  const {\n    city,\n    country,\n    isCheckboxServerWeatherbit,\n    isCheckboxServerOpenweathermap,\n    onLoadWeatherServerWeatherbit,\n    onLoadWeatherServerOpenweathermap,\n  } = props;\n\n  const inactiveСheckboxes =\n    !isCheckboxServerOpenweathermap && !isCheckboxServerWeatherbit;\n\n  return (\n    <div className=\"userButton\">\n      <Button\n        variant=\"contained\"\n        color={inactiveСheckboxes ? \"secondary\" : \"primary\"}\n        disabled={inactiveСheckboxes}\n        onClick={\n          isCheckboxServerOpenweathermap\n            ? onLoadWeatherServerOpenweathermap(city, country)\n            : onLoadWeatherServerWeatherbit(city, country)\n        }\n      >\n        {inactiveСheckboxes ? \"select server\" : \"show weather\"}\n      </Button>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    city: getCity(state),\n    country: getCountry(state),\n    isCheckboxServerWeatherbit: getCheckboxServerWeatherbit(state),\n    isCheckboxServerOpenweathermap: getCheckboxServerOpenweathermap(state),\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLoadWeatherServerOpenweathermap: (city, country) => () =>\n      dispatch(loadWeatherServerOpenweathermap(city, country)),\n    onLoadWeatherServerWeatherbit: (city, country) => () =>\n      dispatch(loadWeatherServerWeatherbit(city, country)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowWeather);\n"]},"metadata":{},"sourceType":"module"}